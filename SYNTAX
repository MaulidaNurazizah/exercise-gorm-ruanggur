sintak:= "INSERT INTO users (username, password) VALUES ($1, $2)"
    _, err := u.db.Exec(sintak, user.Username, user.Password)
    if err != nil {
        log.Println("Failed to insert user:", err)
        return err
    }
return nil


func (u userRepository) CheckAvail(user model.User) error {
    query := "SELECT COUNT() FROM users WHERE username = $1 AND password = $2"
    var count int
    err := u.db.QueryRow(query, user.Username, user.Password).Scan(&count)
    if err != nil {
        log.Println("Gagal Jalankan query:", err)
        return err
    }

    if count == 0 {
        return errors.New("user tidak ditemukan")
    }
    return nil // TODO: replace this
}

func (u userRepository) FetchByID(id int) (model.User, error) {
    row := u.db.QueryRow("SELECT id, username, password FROM users WHERE id = $1", id)

    var user model.User
    err := row.Scan(&user.ID, &user.Username, &user.Password)
    if err != nil {
        return nil, err
    }
    return &user, nil
}
ini student
.
>
>
>
>
>
>
>>

>
>>
>
>
>
>
>
>
>
>
>
>
func (s studentRepoImpl) FetchAll() ([]model.Student, error) {
    query := "SELECT FROM students"
    rows, err := s.db.Query(query)
    if err != nil {
        return nil, err
    }
    defer rows.Close()

    var students []model.Student
    for rows.Next() {
        var student model.Student
        err := rows.Scan(&student.ID, &student.Name, &student.Address, &student.Class)
        if err != nil {
            return nil, err
        }
        students = append(students, student)
        if err = rows.Err(); err != nil {
            return nil, err
        }
    }

    return students, nil // TODO: replace this
}
>
>
>
>
>

>
>
>
>
func (s studentRepoImpl) Store(studentmodel.Student) error {
    query := "INSERT INTO students (name, address, class) VALUES ($1, $2, $3)"
    , err := s.db.Exec(query, student.Name, student.Address, student.Class)
    if err != nil {
        log.Println("Gagal masukan data students:", err)
        return err
    }
    return nil // TODO: replace this
}

func (s studentRepoImpl) Update(id int, studentmodel.Student) error {
    query := "UPDATE students SET name = $1, address = $2, class = $3 WHERE id = $4"
    , err := s.db.Exec(query, student.Name, student.Address, student.Class, id)
    if err != nil {
        return err
    }

    return nil // TODO: replace this
}

func (s *studentRepoImpl) Delete(id int) error {
    query := "DELETE FROM students WHERE id = $1"
    _, err := s.db.Exec(query, id)
    if err != nil {
        return err
    }

    return nil // TODO: replace this
}
>
>
>
>>>>>


>>
>
>
>
ini session
func (u sessionsRepoImpl) AddSessions(session model.Session) error {
    query := "INSERT INTO sessions (token, username,expiry) VALUES ($1, $2, $3)"
    _, err := u.db.Exec(query, session.Token, session.Username, session.Expiry)
    if err != nil {
        return err
    }
    return nil // TODO: replace this
}

func (usessionsRepoImpl) DeleteSession(token string) error {
    query := "DELETE FROM sessions WHERE token = $1"
    , err := u.db.Exec(query, token)
    if err != nil {
        log.Println("Gagal menghapus session:", err)
        return err
    }
    return nil // TODO: replace this
}

func (u *sessionsRepoImpl) UpdateSessions(session model.Session) error {
    query := "UPDATE sessions SET token = $1 WHERE username = $2"
    , err := u.db.Exec(query, session.Token, session.Username)
    if err != nil {
        log.Println("session gagal di update:", err)
        return err
    }
    return nil // TODO: replace this
}
func (u sessionsRepoImpl) SessionAvailName(name string) error {
    query := "SELECT COUNT() FROM sessions WHERE username = $1"
    row := u.db.QueryRow(query, name)

    count := 0
    err := row.Scan(&count)
    if err != nil {
        log.Println("Gagal memeriksa ketersediaan sessions berdasarkan nama:", err)
        return err
    }

    if count == 0 {
        return errors.New("session not found")
    }

    return nil // TODO: replace this
}

func (u *sessionsRepoImpl) SessionAvailToken(token string) (model.Session, error) {
    query := "SELECT token, username, expiry FROM sessions WHERE token = $1"
    row := u.db.QueryRow(query, token)

    session := model.Session{}
    err := row.Scan(&session.Token, &session.Username, &session.Expiry)
    if err != nil {
        if err == sql.ErrNoRows {
            return model.Session{}, errors.New("session not found")
        }
        log.Println("Failed to fetch session:", err)
        return model.Session{}, err
    }
    return session, nil // TODO: replace this
}